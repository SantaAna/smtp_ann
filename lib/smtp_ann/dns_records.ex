defmodule SmtpAnn.DnsRecords do
  alias Ecto.Changeset, as: CS
  alias SmtpAnn.DnsRecords.DnsRecord

  def record_types, do: ~w(mx ns spf)
  
  @doc """
  Creates a changeset that represents a 
  user defined query for a dns record.
  """
  def dns_lookup_changeset(params \\ %{}) do
    {%{}, %{domain_name: :string, record_type: :string}}
    |> CS.cast(params, [:domain_name, :record_type])
    |> CS.validate_required([:domain_name, :record_type])
    |> CS.validate_inclusion(:record_type, record_types())
    |> validate_dns()
  end

  defp validate_dns(cs) do
    CS.validate_change(cs, :domain_name, fn :domain_name, input -> 
      if valid_domain_name?(input) do
        []
      else
        [domain_name: "invalid domain name format"]
      end
    end)
  end
  
  @doc """
  Looks up a dns record based on the params provided.
  The params to those generated by a form created 
  from a dns lookup changeset 
  """
  def lookup_record(params) do
    case validate_dns_lookup(params) do
      {:ok, res} ->
        query(res)

      {:error, cs} ->
        {:error, cs}
    end
  end

  def extract_error_type(%{error: {type, _}}), do: type
  def extract_error_pos(%{error: {_, %{pos: pos}}}), do: pos
  def extract_unparsed(%{unparsed: unparsed}), do: unparsed

  
  defp query(%{record_type: record_type, domain_name: domain_name}) do
    case dispatcher(record_type).(domain_name) do
      {:error, _} -> 
        {:error, :lookup_error}
      {:ok, records} ->
        {:ok, records}
    end
  end

  defp dispatcher(record_type) do
    case record_type do
      "mx" -> &DnsRecord.resolve_mx/1
      "ns" -> &DnsRecord.resolve_ns/1
      "spf" -> &DnsRecord.resolve_spf/1
    end
  end
  
  @doc """
  Validates that the given params are a valid 
  DNS record lookup.
  """
  def validate_dns_lookup(params \\ %{}) do
    params
    |> dns_lookup_changeset()
    |> CS.apply_action(:insert)
  end
  
  @doc """
  Simple function for checking the validity of a domain name.

  TODO: consider replacing with parser defined for handling 
  DNS records.
  """
  def valid_domain_name?(string) do
    Regex.match?(~r/^([[:alnum:]-]+\.)+([[:alnum:]-]+\.?)$/, string)
  end
end
